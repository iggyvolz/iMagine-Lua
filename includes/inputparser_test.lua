if not describe then
  names={}
  function describe(name,fn)
    table.insert(names,name)
    local index=#names
    fn()
    table.remove(names,index)
  end
  function it(name,fn)
    table.insert(names,name)
    local index=#names
    print(table.concat(names," "))
    table.remove(names,index)
  end
  assert={
    ["are"]={
      ["same"]=function()
      end
    }
  }
end
if not inputParser then
  require "inputparser"
end
describe("InputParser",function()
  describe("with person I",function()
    describe("with action magine",function()
      describe("without args",function()
        local text,subject,action,params=inputParser("i.magine()")
        it("should return i.magine() as the first argument.",function()
          assert.are.same("i.magine()",text)
        end)
        it("should return tony as the second argument.",function()
          assert.are.same("tony",subject)
        end)
        it("should return magine as the third argument.",function()
          assert.are.same("magine",action)
        end)
        it("should return {} as the fourth argument.",function()
          assert.are.same({},params)
        end)
      end)
      describe("with no parenthesis",function()
        local text,subject,action,params=inputParser("i.magine")
        it("should return i.magine as the first argument.",function()
          assert.are.same("i.magine",text)
        end)
        it("should return tony as the second argument.",function()
          assert.are.same("tony",subject)
        end)
        it("should return magine as the third argument.",function()
          assert.are.same("magine",action)
        end)
        it("should return {} as the fourth argument.",function()
          assert.are.same({},params)
        end)
      end)
      describe("with parameter furok",function()
        local text,subject,action,params=inputParser("i.magine(furok)")
        it("should return i.magine(furok) as the first argument.",function()
          assert.are.same("i.magine(furok)",text)
        end)
        it("should return tony as the second argument.",function()
          assert.are.same("tony",subject)
        end)
        it("should return magine as the third argument.",function()
          assert.are.same("magine",action)
        end)
        it("should return {\"furok\"} as the fourth argument.",function()
          assert.are.same(params,{"furok"})
        end)
      end)
      describe("with parameters furok and Djarmander",function()
        local text,subject,action,params=inputParser("i.magine(furok,djarmander)")
        it("should return i.magine(furok,djarmander) as the first argument.",function()
          assert.are.same("i.magine(furok,djarmander)",text)
        end)
        it("should return tony as the second argument.",function()
          assert.are.same("tony",subject)
        end)
        it("should return magine as the third argument.",function()
          assert.are.same("magine",action)
        end)
        it("should return {\"furok\",\"djarmander\"} as the fourth argument.",function()
          assert.are.same(params,{"furok","djarmander"})
        end)
      end)
    end)
  end)
  describe("with person strag",function()
    describe("with action magine",function()
      describe("without args",function()
        local text,subject,action,params=inputParser("strag.magine()")
        it("should return strag.magine() as the first argument.",function()
          assert.are.same("strag.magine()",text)
        end)
        it("should return strag as the second argument.",function()
          assert.are.same("strag",subject)
        end)
        it("should return magine as the third argument.",function()
          assert.are.same("magine",action)
        end)
        it("should return {} as the fourth argument.",function()
          assert.are.same({},params)
        end)
      end)
      describe("with no parenthesis",function()
        local text,subject,action,params=inputParser("strag.magine")
        it("should return strag.magine as the first argument.",function()
          assert.are.same("strag.magine",text)
        end)
        it("should return strag as the second argument.",function()
          assert.are.same("strag",subject)
        end)
        it("should return magine as the third argument.",function()
          assert.are.same("magine",action)
        end)
        it("should return {} as the fourth argument.",function()
          assert.are.same({},params)
        end)
      end)
      describe("with parameter freep",function()
        local text,subject,action,params=inputParser("strag.magine(freep)")
        it("should return strag.magine(freep) as the first argument.",function()
          assert.are.same("strag.magine(freep)",text)
        end)
        it("should return strag as the second argument.",function()
          assert.are.same("strag",subject)
        end)
        it("should return magine as the third argument.",function()
          assert.are.same("magine",action)
        end)
        it("should return {\"freep\"} as the fourth argument.",function()
          assert.are.same(params,{"freep"})
        end)
      end)
      describe("with parameters freep and primroot",function()
        local text,subject,action,params=inputParser("strag.magine(freep,primroot)")
        it("should return strag.magine(freep,primroot) as the first argument.",function()
          assert.are.same("strag.magine(freep,primroot)",text)
        end)
        it("should return strag as the second argument.",function()
          assert.are.same("strag",subject)
        end)
        it("should return magine as the third argument.",function()
          assert.are.same("magine",action)
        end)
        it("should return {\"freep\",\"primroot\"} as the fourth argument.",function()
          assert.are.same(params,{"freep","primroot"})
        end)
      end)
    end)
  end)
end)
